---
title: "DBSCAN bootstrap test"
format: html
editor: visual
---

## Test of a bootstrap approach to DBSCAN clustering of roosts

```{r}
library(tidyverse)
library(sf)
library(fpc)
library(mapview) # for viewing the created hulls
```

```{r}
load("data/distanceMatrix.Rda")
load("data/simplifiedRoosts.Rda")
```

To make this more tractable, I'm going to just focus on six months of data (second half of 2022).

```{r}
wch22 <- lubridate::year(simplifiedRoosts$roost_date) == 2022 & lubridate::month(simplifiedRoosts$roost_date) %in% c(7:12)
matrix22 <- distanceMatrix[wch22, wch22]
roosts22 <- simplifiedRoosts[wch22, ]
dim(matrix22)
nrow(roosts22)
```

Let's do a 60% subset

```{r}
N <- nrow(roosts22)
len <- 25
pct <- 60
sub_roosts <- vector(mode = "list", length = len)
sub_matrix <- vector(mode = "list", length = len)
for(i in 1:len){
  indsubset <- sample(N, size = N*(pct/100))
  roosts <- roosts22[indsubset, ]
  matrix <- matrix22[indsubset, indsubset]
  sub_roosts[[i]] <- roosts
  sub_matrix[[i]] <- matrix
  cat(i)
}
```

Now do the dbscans

```{r}
# Run dbscan
dbscans <- map(sub_matrix, ~dbscan(.x, eps = 1000, MinPts = 3, method = "dist"))

# Extract cluster assignments
clustered <- map2(.x = sub_roosts, .y = dbscans, ~{
  clusterAssignment <- .y$cluster
  roosts_annotated <- bind_cols(.x, "cluster" = clusterAssignment) %>%
    mutate(isOutlier = ifelse(cluster == 0, TRUE, FALSE))
})
```

Creating convex hulls by factor using the sf package:

```{r}
# Code adapted from https://stackoverflow.com/questions/58622586/how-to-construct-plot-convex-hulls-of-polygons-from-points-by-factor-using-sf.

# Create sf datasets
sfs <- map(clustered, ~.x %>% st_as_sf(coords = c("location_long", "location_lat"), crs = "WGS84"))

# What are we working with? Perform fast visual check using mapview-package
mapview::mapview(sfs[[1]])
# Whoa, this is a much much better way of making interactive maps to examine!!!

#group and summarise by cluster, ignoring cluster 0 (outliers)
hulls <- map(sfs, ~.x %>%
               filter(cluster != 0) %>%
               group_by(cluster) %>%
               summarize(geometry = st_combine(geometry)) %>%
               st_convex_hull())

# Result, for one of the iterations
mapview::mapview(list(sfs[[1]], hulls[[1]]))
# this is awesome. Time to do a mapview tutorial to learn how to color things and make this look prettier.
```
