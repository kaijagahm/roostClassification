---
title: "Roost classifications"
format: html
editor: source
---

Load packages
```{r}
library(vultureUtils)
library(tidyverse)
library(gganimate)
library(dendextend)
library(sf)
library(fpc)
library(paletteer)
library(factoextra) # https://www.datanovia.com/en/lessons/determining-the-optimal-number-of-clusters-3-must-know-methods/#elbow-method
```

Load data
```{r}
load("data/datAnnotCleaned.Rda")
```

Get roost classifications
```{r}
roosts <- vultureUtils::get_roosts_df(df = datAnnotCleaned, id = "trackId")
simplifiedRoosts <- roosts %>%
  dplyr::select(trackId, location_long, location_lat, roost_date)

# double-check that we just have one roost per individual per night
simplifiedRoosts %>%
  group_by(trackId, roost_date) %>%
  summarize(n = n()) %>%
  pull(n) %>%
  table()
```

Make some plots

```{r}
simplifiedRoosts %>%
  ggplot(aes(x = location_long, y = location_lat))+
  geom_point(alpha = 0.2)+
  theme_classic()+
  theme(legend.position = "none")
```

What if we facet by year?
```{r}
simplifiedRoosts <- simplifiedRoosts %>%
  mutate(year = lubridate::year(roost_date))

years <- simplifiedRoosts %>%
  group_by(year) %>%
  group_split(.keep = T)

simplifiedRoosts %>%
  ggplot(aes(x = location_long, y = location_lat))+
  geom_point(alpha = 0.2)+
  theme_classic()+
  theme(legend.position = "none")+
  facet_wrap(~year)
```

Just as an experiment, let's look at the roosts each day.

```{r}
anim <- simplifiedRoosts %>%
  #filter(year == 2020) %>%
  mutate(time = as.numeric(factor(roost_date))) %>%
  ggplot(aes(x = location_long, y = location_lat, group = trackId))+
  geom_point(size = 5, aes(col = factor(year)))+
  theme_classic()+
  scale_color_brewer(name = "Year", palette = "Dark2")+
  #theme(legend.position = "none")+
  transition_time(time)+
  shadow_mark(color = "black", alpha = 0.1, size = 2)+
  ggtitle("Roost locations over time")

animate(anim, fps = 4)
anim_save("data/roostLocations.gif", anim)
```

Can't do hierarchical clustering because there are way, way too many points. 
Attempt k-means clustering
```{r}
# Compute a distance matrix for all the roost locations
roostLocs <- simplifiedRoosts %>%
  dplyr::select(location_long, location_lat)
clusters <- kmeans(x = roostLocs, centers = 50)
centers <- clusters$centers
assignments <- clusters$cluster

simplifiedRoosts <- simplifiedRoosts %>%
  mutate(cluster = assignments)
```

```{r}
simplifiedRoosts %>%
  ggplot(aes(x = location_long, y = location_lat, col = factor(cluster)))+
  geom_point(alpha = 0.5)+
  theme_classic()+
  theme(legend.position = "none")
```
Okay, we could do k-means clustering with any arbitrary number and get *some* result. But I'm not sure how meaningful that is.

Let's see if there's any clear answer for the number of clusters. Because this is hard to run on all the data at a time, I'm going to divide it by year.

```{r eval = F}
years <- simplifiedRoosts %>%
  dplyr::select(year, location_long, location_lat) %>%
  group_by(year) %>%
  group_split(.keep = F)


map(years, ~factoextra::fviz_nbclust(.x, kmeans, k.max = 20, method = "silhouette", nboot = 25))
```

Interesting. This method consistently picks out a very small number of clusters, which suggests to me that clustering by this method is probably not the way to go. Clustering fundamentally seeks to address a different problem than we're dealing with here. 

A key thing to figure out is whether these points that are far from all the others are *actually* far away (i.e. the bird found a new roost site) or whether this is due to errors. If errors, then we *want* them to be grouped in with existing roost sites. But if they're actually far away, then we *don't* want them to be grouped with existing roost sites.

I am not sure how to tell the difference between these two cases!

What if, instead, we did this iteratively. First, deal with the outlier points. 
1. "global outliers" are > 2km from any other point in the dataset (i.e. a totally unique roost site)
2. "local outliers" are >2km from any other point within 1 month (or some other arbitrary time interval?). Not sure how to deal with these.
3. Remove global and local outliers. Then apply clustering (k-means??) on the remaining data.

## Try hierarchical clustering

```{r}
?distm # default unit here is meters, which is what we want!
testDF <- years[[2]] %>%
  sf::st_as_sf(coords = c("location_long", "location_lat"), remove = F) %>%
  sf::st_set_crs("WGS84")

# Compute pairwise distances between points
# distanceMatrix <- sf::st_distance(testDF, testDF) %>% # this takes a really really long time with such a big dataset.
#   as.dist()
# save(distanceMatrix, file = "data/distanceMatrix.Rda")
load("data/distanceMatrix.Rda")
```

```{r}
# Do clustering
clust <- hclust(d = distanceMatrix, method = "complete")
plot(clust, labels = F)

# Cut the dendrogram into different numbers of clusters
numberCuts <- as.data.frame(cutree(clust, k = 30:60))
names(numberCuts) <- paste0("k_", names(numberCuts))

# Alternatively, cut the dendrogram based on different distances
distanceCuts <- as.data.frame(cutree(clust, h = c(250, 500, 1000, 2000)))
names(distanceCuts) <- paste0("dist_", names(distanceCuts))

# Create a data frame
testDF_withClusters <- bind_cols(testDF, numberCuts, distanceCuts)
```

Make plots--numbers

```{r}
plots_numbers <- map(names(testDF_withClusters)[grepl("k_", names(testDF_withClusters))], ~{
  n <- str_extract(.x, "[0-9]+")
  testDF_withClusters %>%
    ggplot(aes(x = location_long, y = location_lat, col = as.factor(.data[[.x]])))+
    geom_point(alpha = 0.3)+
    theme_classic()+
    theme(legend.position = "none")+
    coord_equal()+
    ggtitle(paste0("Number of clusters = ", n))
})
walk(plots_numbers, print)
```

Make plots--distances

```{r}
plots_distances <- map(names(testDF_withClusters)[grepl("dist_", names(testDF_withClusters))], ~{
  testDF_withClusters %>%
    ggplot(aes(x = location_long, y = location_lat, col = as.factor(.data[[.x]])))+
    geom_point(alpha = 0.3)+
    theme_classic()+
    theme(legend.position = "none")+
    coord_equal()
})
walk(plots_distances, print)
```

Ok, if we cut the tree based on distances, what does the number of clusters look like?
```{r}
# number of clusters
dists <- seq(100, 2000, by = 100)
testDistanceCuts <- as.data.frame(cutree(clust, h = dists))
nClusters <- map_dbl(testDistanceCuts, max)
plot(nClusters~dists, type = "l")
# This is not particularly helpful for selecting the distance. I suppose we could look at the elbow, which is a bit lower than 500m. 1000m seems like a potentially relevant distance, though, so I'm going to go with that for now, I guess? Note that even at a distance of 1000, we still get about 500 unique roosts.
```

Continuing with a 1000m (1km) distance for roosts

Zoom in on just the center of the map and visualize the different numbers
```{r}
zoomData <- testDF_withClusters %>%
  filter(location_lat < 31.8, location_lat > 30.5, location_long < 35.4, location_long > 34.6)

zoomData %>%
  ggplot(aes(x = location_long, y = location_lat, col = factor(k_30)))+
  geom_point(alpha = 0.3)+
  theme_classic()+
  theme(legend.position = "none")+
  coord_equal()# there are obviously way too many unique clusters to color them all. Let's zoom in on the center of this and take a closer look.

plots_numbers_zoom <- map(names(zoomData)[grepl("k_", names(zoomData))], ~{
  n <- str_extract(.x, "[0-9]+")
  zoomData %>%
    ggplot(aes(x = location_long, y = location_lat, col = as.factor(.data[[.x]])))+
    geom_point(alpha = 0.3)+
    theme_classic()+
    theme(legend.position = "none")+
    coord_equal()+
    ggtitle(paste0("Number of clusters = ", n))
})
walk(plots_numbers_zoom, print)
```
## DBSCAN clustering

I think DBSCAN will be a good clustering algorithm here because it can identify weird-shaped clusters, and because the parameters that need tuning can be biologically informed. It will also tell us which points are outliers, and we can then do whatever we want with outliers (e.g. assign them to their own roosts)

```{r}
set.seed(3)
# eps is the reachability distance. I'm going to consider that to be 500m for starters. minPts for a core point is going to be 3.
dbscan <- dbscan(distanceMatrix, eps = 750, method = "dist", MinPts = 3)

data_dbscan <- bind_cols(testDF, "cluster" = dbscan$cluster) %>%
  mutate(isOutlier = case_when(cluster == 0 ~ T,
                               TRUE ~ F))

# plot
data_dbscan %>%
  ggplot(aes(x = location_long, y = location_lat, col = factor(cluster)))+
  geom_point(alpha = 0.3, aes(shape = isOutlier))+
  scale_shape_manual(values = c(19, 3))+
  theme_classic()+
  theme(legend.position = "none")+
  coord_equal()

# zoom in
data_dbscan %>%
  filter(location_lat < 31.8, location_lat > 30.5, location_long < 35.4, location_long > 34.6) %>%
  ggplot(aes(x = location_long, y = location_lat, col = factor(cluster)))+
  geom_point(alpha = 0.3, aes(shape = isOutlier))+
  scale_shape_manual(values = c(19, 3))+
  theme_classic()+
  theme(legend.position = "none")+
  coord_equal()
```

How many points are classified as outliers?

```{r}
nPoints <- nrow(testDF)
dists <- c(100, 250, 500, 750, 1000, 1500)
minpts <- 3
dbscans_list <- vector(mode = "list", length = length(dists))
for(i in 1:length(dists)){
  dbscans_list[[i]] <- fpc::dbscan(distanceMatrix, eps = dists[i], method = "dist", MinPts = minpts)
}
data_dbscans <- map(dbscans_list, ~bind_cols(testDF, "cluster" = .x$cluster) %>%
                      mutate(isOutlier = ifelse(cluster == 0, T, F)))
nOutliers <- map_dbl(data_dbscans, ~.x %>%
                       filter(cluster == 0) %>%
                       nrow())
outliers <- data.frame(dist = dists, 
                       nOutliers = nOutliers,
                       propOutliers = nOutliers/nPoints)

outliers %>%
  ggplot(aes(x = dist, y = propOutliers))+
  geom_point(size = 2)+
  geom_line()+
  theme_classic()+
  ylab("Proportion of points not included in a cluster")+
  xlab("Neighborhood distance (m)")
```
Make zoomed-in plots for each dbscan distance
```{r}
set.seed(1)
zoomPlots <- map2(data_dbscans, dists, ~{
  yr <- min(lubridate::year(.x$roost_date))
  .x %>%
    filter(location_lat < 31.8, location_lat > 30.5, location_long < 35.4, location_long > 34.6) %>%
    ggplot(aes(x = location_long, y = location_lat, col = factor(cluster)))+
    geom_point(alpha = 0.3, aes(shape = isOutlier))+
    scale_shape_manual(values = c(19, 3))+
    theme_classic()+
    theme(legend.position = "none")+
    coord_equal()+
    ggtitle(paste0("Year = ", yr, "; MinPts = ", minpts, "; eps = ", .y, "m"))+
    scale_color_paletteer_d("trekcolors::lcars_cardassian")
})

walk(zoomPlots, print)
```


